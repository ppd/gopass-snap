#!/bin/bash

function faketty() {
  script -qfc "$(printf "%q " "$@")" /dev/null
}

function can_open_file() {
  return $(head -c0 "$1" &> /dev/null);
}

function file_exists() {
  return $(stat "$1" &> /dev/null)
}

realhome=`getent passwd $UID | cut -d ':' -f 6`

# check the required interfaces (ssh-keys, gpg-keys) and tell user how to connect them
can_open_file /etc/ssh/ssh_config || ssh_keys_connected=false

gnupg_home="$realhome/.gnupg"
if file_exists "$gnupg_home" && ! can_open_file "$gnupg_home"; then
  gpg_keys_connected=false
fi

if [ "$ssh_keys_connected" = false ]; then
  printf "%s\n" \
  "Plug ssh-keys is not connected. This is required for syncing with git ssh remotes." \
  "To connect, run:" \
  "snap connect gopass:ssh-keys" ""
fi

if [ "$gpg_keys_connected" = false ]; then
  printf "%s\n" \
  "Plug gpg-keys is not connected. This is required for the default gpg crypto backend." \
  "To connect, run:" \
  "snap connect gopass:gpg-keys" ""
fi

if [ "$ssh_keys_connected" = false ] || [ "$gpg_keys_connected" = false ]; then
  exit 1
fi

# the home interface does not grant us access to dot-prefixed directories
# in REALHOME

export GOPASS_HOMEDIR="$realhome/gopass"
mkdir -p "$GOPASS_HOMEDIR"

# automatically add ssh keys to agent on first unlock
export GIT_SSH_COMMAND="ssh -o AddKeysToAgent=yes"
if grep -q sss_ssh_knownhostsproxy /etc/ssh/ssh_config; then
  # ignore global SSH config because SSSD's known hosts config is not supported
  # by the ssh-keys interface
  export GIT_SSH_COMMAND="$GIT_SSH_COMMAND -F $HOME/.ssh/config"
fi

# run gopass with fake tty so gpg's pinentry does not fail
cmd="$1"
shift

faketty "$cmd" "$@"
